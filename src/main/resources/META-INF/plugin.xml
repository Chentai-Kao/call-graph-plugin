<!-- `url` specifies the URL of the plugin homepage (can be opened from "Plugins" settings dialog) -->
<idea-plugin url="https://plugins.jetbrains.com/plugin/12304-call-graph">
    <!-- Plugin name -->
    <name>Call Graph</name>

    <!-- Plugin version -->
    <version>0.1.17</version>

    <!-- Unique identifier of the plugin. Cannot be changed between the plugin versions.
         If not specified, assumed to be equal to <name>. -->
    <id>call-graph</id>

    <!-- Description of the plugin. -->
    <description><![CDATA[
      <p>A plugin to visualize function call graph of any codebase for IDEs based on the IntelliJ platform.</p>
      <p>The goal is to make codebase extremely easy to understand, necessary for code navigation and debugging.</p>
      <p>Currently it only supports Java. If you want a similar tool for Typescript, Javascript, or Python, I highly recommend <a href="https://codemap.app">Codemap</a>, another tool I built.</p>
      <p>See also:</p>
      <ul>
        <li>
          <a href="https://github.com/Chentai-Kao/call-graph-plugin">Source code</a>: pull requests are welcome!
        </li>
        <li>
          <a href="https://youtu.be/cd8IYPVRkhI">Demo video</a>: a quick glance of its features.
        </li>
        <li>
          Love this plugin? Please leave a review, or consider
          <a href="https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=chentai.kao%40gmail.com&item_name=Support+development+of+the+Call+Graph+plugin&currency_code=USD&source=url">donation</a>
          to support the developer.
        </li>
      </ul>
    ]]></description>

    <!-- Description of changes in the latest version of the plugin. Displayed in the "Plugins" settings dialog and
         in the plugin repository Web interface. -->
    <change-notes><![CDATA[
      <p>0.1:</p>
      <ul>
        <li>
          Initial release.
        </li>
        <li>
          Support <code>Java</code>.
        </li>
        <li>
          Support building call graph from functions of <b>the entire project</b>, <b>a single module</b>, or <b>a single folder path</b>.
        </li>
        <li>
          Support two graph layouts: <b>fit to best ratio</b> and <b>fit to viewport</b>.
          You can also tweak the grid size yourself.
        </li>
        <li>
          Support selecting <b>a single node</b> or <b>multiple nodes</b> to visualize upstream/downstream calls.
        </li>
        <li>
          Support <b>code to graph</b>: build call graph by right-clicking any function in the source code.
        </li>
        <li>
          Support <b>graph to code</b>: jump to function definition in the source code from any node in the graph.
        </li>
        <li>
          Support <b>function name search</b>: highlight nodes in the graph whose function name matches your search query.
        </li>
        <li>
          Support color-coding nodes by <b>function access level (public, protected, package local, private)</b> and <b>class name</b>.
        </li>
        <li>
          Support filtering nodes by <b>function access level (public, protected, package local, private)</b>.
        </li>
      </ul>
    ]]></change-notes>

    <!-- The vendor of the plugin. The optional "url" attribute specifies the URL of the vendor homepage.
         The optional "email" attribute specifies the e-mail address of the vendor.-->
    <vendor url="https://chent.ai" email="chentai.kao@gmail.com">Chentai Kao</vendor>

    <!-- The unique identifiers of the plugins on which this plugin depends. -->
    <depends>com.intellij.modules.lang</depends>
    <depends>com.intellij.modules.java</depends>

    <!-- Optional dependency on another plugin. If the plugin with the "com.MySecondPlugin" ID is installed,
         the contents of mysecondplugin.xml (the format of this file conforms to the format of plugin.xml)
         will be loaded. -->
    <!-- <depends optional="true" config-file="mysecondplugin.xml">com.MySecondPlugin</depends> -->

    <!-- Allows a plugin to integrate its help system (in JavaHelp format) with the IDE help system.
         The "file" attribute specifies the name of the JAR file in the "help" subdirectory of the plugin directory.
         The "path" attribute specifies the name of the helpset file within the JAR file.-->
    <!-- <helpset file="myhelp.jar" path="/Help.hs" /> -->

    <!-- Minimum and maximum build of IDE compatible with the plugin -->
    <idea-version since-build="201"/>

    <!-- Resource bundle (/messages/MyPluginBundle.properties) to be used with `key` attributes in extension points
         and implicit keys like `action.[pluginID].[ActionID].text` -->
    <!-- <resource-bundle xmlns="">messages.MyPluginBundle</resource-bundle> -->

    <!-- Plugin's application components (with component's interface and implementation class) -->
    <!--<application-components>
        <interface-class>com.foo.Component1Interface</interface-class>
        <implementation-class>com.foo.impl.Component1Impl</implementation-class>
    </application-components> -->

    <!-- Plugin's project components -->
    <!-- <project-components> -->
        <!-- <component> -->
            <!-- Interface and implementation classes are the same -->
            <!-- <implementation-class>com.foo.Component2</implementation-class> -->

            <!-- If the "workspace" option is set "true", the component
                 saves its state to the .iws file instead of the .ipr file.
                 Note that the <option> element is used only if the component
                 implements the JDOMExternalizable interface. Otherwise, the
                 use of the <option> element takes no effect.  -->
            <!-- <option name="workspace" value="true" /> -->

            <!-- If the "loadForDefaultProject" tag is present, the project component is instantiated also
                 for the default project. -->
            <!-- <loadForDefaultProject/> -->
        <!-- </component> -->
    <!-- </project-components> -->

    <!-- Plugin's module components -->
    <!-- <module-components>
        <component>
            <implementation-class>com.foo.Component3</implementation-class>
        </component>
    </module-components> -->

    <!-- Actions -->
    <actions>
        <!-- The <group> element defines an action group.
             <action>, <group> and <separator> elements defined within it are automatically included in the group.
             - "id" (required) specifies an unique identifier for the action.
             - "class" (optional) specifies the full-qualified name of the class implementing the group.
               If not specified, com.intellij.openapi.actionSystem.DefaultActionGroup is used.
             - "text" (optional) specifies the text of the group (text for the menu item showing the submenu).
             - "description" (optional) specifies the text displayed in the status bar when the group is focused.
             - "icon" (optional) specifies the icon which is displayed on the toolbar button or next to the group.
             - "popup" (optional) specifies how the group is presented in the menu. If a group has popup="true",
               actions in it are placed in a submenu; for popup="false", actions are displayed as a section of
               the same menu delimited by separators. -->
        <group id="CallGraphActionGroup"
               text="Call Graph"
               description="Actions of the Call Graph plugin"
               icon="/icons/icon.svg"
               popup="false">
            <!-- The <action> element defines an action to register.
                 - "id" (required) specifies an unique identifier for the action.
                 - "class" (required) specifies the full-qualified name of the class implementing the action.
                 - "text" (required) specifies the text (tooltip for toolbar button or text for menu item).
                 - "use-shortcut-of" (optional) specifies the ID of the action whose keyboard shortcut this action uses.
                 - "description" (optional) specifies the text displayed in the status bar when the action is focused.
                 - "icon" (optional) specifies the icon displayed on the toolbar button or next to the menu item. -->
            <action id="CallGraph.ViewUpstreamDownstreamCallGraphFromSource"
                    class="callgraph.ViewUpstreamDownstreamAction"
                    text="View upstream/downstream call graph"
                    description="View the upstream/downstream call graph of this function"
                    icon="/icons/icon.svg">
            </action>
            <action id="CallGraph.ViewUpstreamCallGraphFromSource"
                    class="callgraph.ViewUpstreamAction"
                    text="View upstream call graph"
                    description="View the upstream call graph of this function"
                    icon="/icons/icon.svg">
            </action>
            <action id="CallGraph.ViewDownstreamCallGraphFromSource"
                    class="callgraph.ViewDownstreamAction"
                    text="View downstream call graph"
                    description="View the downstream call graph of this function"
                    icon="/icons/icon.svg">
            </action>
            <!-- The <add-to-group> node specifies that the action should be added to an existing group.
                 An action can be added to several groups.
                 - "group-id" (required) specifies the ID of the group to which the action is added. The group must be
                   implemented by an instance of the DefaultActionGroup class.
                 - "anchor" (required) specifies the position of the action in the group relative to other actions.
                   It can have the values "first", "last", "before" and "after".
                 - "relative-to-action" (required if the anchor is set to "before" and "after") specifies the action
                   before or after which the current action is inserted. -->
            <add-to-group group-id="EditorPopupMenu" anchor="last"/>
            <!-- The <separator> element defines a separator between actions. -->
            <!-- <separator/> -->
            <!-- <group id="AnotherNestedGroup"/> -->
            <!-- The <reference> element allows to add an existing action to the group.
                 - "ref" (required) specifies the ID of the action to add. -->
            <!-- <reference ref="EditorCopy"/> -->
        </group>
    </actions>

    <!-- Extension points defined by the plugin. Extension points are registered by a plugin so that other plugins
         can provide this plugin with certain data. The "beanClass" attribute specifies the class the implementations
         of which can be used for the extension point. -->
    <!-- <extensionPoints>
        <extensionPoint name="testExtensionPoint" beanClass="com.foo.impl.MyExtensionBean"/>
    </extensionPoints>
    -->

    <!-- Extensions which the plugin adds to extension points defined by the IntelliJ Platform or by other plugins.
         The "defaultExtensionNs " attribute must be set to the ID of the plugin defining the extension point,
         or to "com.intellij" if the extension point is defined by the IntelliJ Platform.
         The name of the tag within the <extensions> tag matches the name of the extension point,
         and the "implementation" class specifies the name of the class added to the extension point. -->
    <extensions defaultExtensionNs="com.intellij">
        <toolWindow
                id="Call Graph"
                secondary="true"
                icon="/icons/icon.svg"
                anchor="right"
                factoryClass="callgraph.CallGraphToolWindowFactory"/>
        <!-- Project service holds a reference to the tool window, which is accessible by an action (editor menu) -->
        <projectService serviceInterface="callgraph.CallGraphToolWindowProjectService"
                        serviceImplementation="callgraph.CallGraphToolWindowProjectService"/>
    </extensions>

    <!-- <extensions defaultExtensionNs="com.intellij">
        <applicationConfigurable groupId="editor" instance="com.maddyhome.idea.vim.ui.VimEmulationConfigurable"/>
    </extensions> -->

    <!-- <extensions defaultExtensionNs="IdeaVIM">
        <vimExtension implementation="com.maddyhome.idea.vim.extension.surround.VimSurroundExtension"/>
        <vimExtension implementation="com.maddyhome.idea.vim.extension.multiplecursors.VimMultipleCursorsExtension"/>
        <vimExtension implementation="com.maddyhome.idea.vim.extension.commentary.CommentaryExtension"/>
    </extensions> -->

    <!-- Extensions which the plugin adds to extension points defined by the IntelliJ Platform or by other plugins.
         The "defaultExtensionNs " attribute must be set to the ID of the plugin defining the extension point,
         or to "com.intellij" if the extension point is defined by the IntelliJ Platform. The name of the tag
         within the <extensions> tag matches the name of the extension point, and the "implementation" class specifies
         the name of the class added to the extension point. -->
    <!-- <extensions xmlns="VssIntegration">
        <testExtensionPoint implementation="com.foo.impl.MyExtensionImpl"/>
    </extensions> -->
</idea-plugin>
